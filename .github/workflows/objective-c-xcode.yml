name: Xcode - Build and Analyze

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: Build and analyze default scheme
    runs-on: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Flutter and dependencies
        # Assuming you're using Flutter for a mobile app.
        # This step is crucial for the build to succeed if your project uses Flutter.
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable' # or 'beta', 'dev'

      - name: Get Flutter dependencies
        run: flutter pub get

      - name: Run build_runner for code generation
        run: flutter packages pub run build_runner build

      - name: Find Xcode project or workspace
        id: find_project
        run: |
          if [ -d "./ios" ]; then
            cd ./ios
          fi
          
          if [ -d *.xcworkspace ]; then
            echo "project_path=$(pwd)" >> $GITHUB_OUTPUT
            echo "file_type=workspace" >> $GITHUB_OUTPUT
            echo "file_to_build=$(basename *.xcworkspace)" >> $GITHUB_OUTPUT
          elif [ -d *.xcodeproj ]; then
            echo "project_path=$(pwd)" >> $GITHUB_OUTPUT
            echo "file_type=project" >> $GITHUB_OUTPUT
            echo "file_to_build=$(basename *.xcodeproj)" >> $GITHUB_OUTPUT
          else
            echo "No .xcworkspace or .xcodeproj found!"
            exit 1
          fi

      - name: Get default scheme
        id: get_scheme
        run: |
          cd ${{ steps.find_project.outputs.project_path }}
          
          # Using xcodebuild to find the default scheme for the project
          scheme=$(xcodebuild -list -json | ruby -e "require 'json'; data = JSON.parse(STDIN.read); puts data['project']['targets'][0]['name']")
          echo "scheme=$scheme" >> $GITHUB_OUTPUT
          echo "Using default scheme: $scheme"

      - name: Clean, Build, and Analyze
        run: |
          cd ${{ steps.find_project.outputs.project_path }}
          
          # Use the determined file and scheme to run xcodebuild
          xcodebuild clean build analyze \
            -scheme "${{ steps.get_scheme.outputs.scheme }}" \
            -"${{ steps.find_project.outputs.file_type }}" "${{ steps.find_project.outputs.file_to_build }}" \
            | xcpretty && exit ${PIPESTATUS[0]}
